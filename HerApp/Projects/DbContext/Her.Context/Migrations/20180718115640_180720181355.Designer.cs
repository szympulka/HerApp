// <auto-generated />
using System;
using Her.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Her.Context.Migrations
{
    [DbContext(typeof(HerContext))]
    [Migration("20180718115640_180720181355")]
    partial class _180720181355
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Her.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("BotName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedUTC");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsCreated");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Microsoft");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Skype");

                    b.Property<string>("Surname");

                    b.Property<string>("Teams");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers","user");
                });

            modelBuilder.Entity("Her.Domain.Entities.Dictionaries.IntrestModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Interest","Dictionary");
                });

            modelBuilder.Entity("Her.Domain.Entities.Dictionaries.MPKInfoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("Id");

                    b.ToTable("MPKInfo","Dictionary");
                });

            modelBuilder.Entity("Her.Domain.Entities.Dictionaries.WeatherModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DailyNightSummary");

                    b.Property<string>("DailySummary");

                    b.Property<DateTime>("Date");

                    b.Property<string>("ProbabilityOfRain");

                    b.Property<DateTime>("Sunrise");

                    b.Property<DateTime>("Sunset");

                    b.Property<string>("Wind");

                    b.HasKey("Id");

                    b.ToTable("Weather","Dictionary");
                });

            modelBuilder.Entity("Her.Domain.Entities.Dictionaries.WroCategoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IntrestId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("IntrestId");

                    b.ToTable("WroCategory","Dictionary");
                });

            modelBuilder.Entity("Her.Domain.Entities.ManyToMany.UserInterestModel", b =>
                {
                    b.Property<long>("IntrestID");

                    b.Property<string>("UserID");

                    b.HasKey("IntrestID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserInterest","User");
                });

            modelBuilder.Entity("Her.Domain.Entities.NotificationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<int>("ImportantValue");

                    b.Property<bool>("IsReaded");

                    b.Property<string>("Text");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Notification","notification");
                });

            modelBuilder.Entity("Her.Domain.Entities.TaskCategoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("UserGuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("TaskCategory","task");
                });

            modelBuilder.Entity("Her.Domain.Entities.TaskModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Name");

                    b.Property<TimeSpan?>("Remind");

                    b.Property<long>("TaskCategoryId");

                    b.Property<DateTime?>("TodoDate");

                    b.Property<DateTime>("UTC");

                    b.HasKey("Id");

                    b.HasIndex("TaskCategoryId");

                    b.ToTable("Task","task");
                });

            modelBuilder.Entity("Her.Domain.Entities.UserCustomNotificationModel", b =>
                {
                    b.Property<string>("UserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("NotificationEvent");

                    b.Property<bool>("NotificationTask");

                    b.Property<bool>("NotificationWeather");

                    b.Property<TimeSpan>("RememberTime");

                    b.HasKey("UserID");

                    b.ToTable("UserDailyNotificationModel","user");
                });

            modelBuilder.Entity("Her.Domain.Entities.UserCustomSettingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DailyWroEvent");

                    b.Property<int>("DailyWroEventCount");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("UserCustomSettings","user");
                });

            modelBuilder.Entity("Her.Domain.Entities.UserDailyWroEventsModel", b =>
                {
                    b.Property<long>("WrocItemsID");

                    b.Property<string>("UserID");

                    b.HasKey("WrocItemsID", "UserID");

                    b.HasAlternateKey("UserID", "WrocItemsID");

                    b.ToTable("UserDailyWroEvents","User");
                });

            modelBuilder.Entity("Her.Domain.Entities.VersionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("LastVersionNumber")
                        .HasMaxLength(12);

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(12);

                    b.Property<int>("VersionType");

                    b.HasKey("Id");

                    b.ToTable("Version","version");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocItemsModel", b =>
                {
                    b.Property<long>("WrocItemsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("Id");

                    b.Property<bool>("IsCinema");

                    b.Property<string>("PlaceName");

                    b.Property<bool>("Premiere");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Ticketing");

                    b.Property<bool>("UrbancardPremium");

                    b.HasKey("WrocItemsId");

                    b.ToTable("WrocItems","wro");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocMainImageModel", b =>
                {
                    b.Property<long>("WrocMainImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<string>("Description");

                    b.Property<string>("Large");

                    b.Property<string>("Standard");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Tile");

                    b.Property<long?>("WrocOfferId");

                    b.HasKey("WrocMainImageId");

                    b.HasIndex("WrocOfferId")
                        .IsUnique()
                        .HasFilter("[WrocOfferId] IS NOT NULL");

                    b.ToTable("WrocMainImage","wro");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferAdressModel", b =>
                {
                    b.Property<long>("WrocOfferAdressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.Property<long?>("WrocItemId");

                    b.Property<string>("ZipCode");

                    b.HasKey("WrocOfferAdressId");

                    b.HasIndex("WrocItemId")
                        .IsUnique()
                        .HasFilter("[WrocItemId] IS NOT NULL");

                    b.ToTable("WrocOfferAdresss","wro");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferCategoriesModel", b =>
                {
                    b.Property<long>("WrocOfferCategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<long>("Id");

                    b.Property<string>("LongName");

                    b.Property<string>("Name");

                    b.Property<long?>("WrocOfferId");

                    b.HasKey("WrocOfferCategoriesId");

                    b.HasIndex("WrocOfferId");

                    b.ToTable("WrocOfferCategories","wro");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferModel", b =>
                {
                    b.Property<long>("WrocOfferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<string>("ExternalLink");

                    b.Property<long>("Id");

                    b.Property<string>("LongDescription");

                    b.Property<string>("OfferType");

                    b.Property<string>("PageLink");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.Property<long?>("WrocItemId");

                    b.HasKey("WrocOfferId");

                    b.HasIndex("WrocItemId")
                        .IsUnique()
                        .HasFilter("[WrocItemId] IS NOT NULL");

                    b.ToTable("WrocOffer","wro");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferTypeModel", b =>
                {
                    b.Property<long>("WrocOfferTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<long>("Id");

                    b.Property<string>("LongName");

                    b.Property<string>("Name");

                    b.Property<long?>("WrocOfferId");

                    b.HasKey("WrocOfferTypeId");

                    b.HasIndex("WrocOfferId")
                        .IsUnique()
                        .HasFilter("[WrocOfferId] IS NOT NULL");

                    b.ToTable("WrocOfferType","wro");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Her.Domain.Entities.Dictionaries.WroCategoryModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Dictionaries.IntrestModel", "Intrest")
                        .WithMany("WrocCategory")
                        .HasForeignKey("IntrestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Her.Domain.Entities.ManyToMany.UserInterestModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Dictionaries.IntrestModel", "Intrest")
                        .WithMany("UserInterests")
                        .HasForeignKey("IntrestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Interests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Her.Domain.Entities.NotificationModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Her.Domain.Entities.TaskCategoryModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithMany("TaskCategory")
                        .HasForeignKey("UserGuid");
                });

            modelBuilder.Entity("Her.Domain.Entities.TaskModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.TaskCategoryModel", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Her.Domain.Entities.UserCustomNotificationModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithOne("CustomNotification")
                        .HasForeignKey("Her.Domain.Entities.UserCustomNotificationModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Her.Domain.Entities.UserCustomSettingsModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithOne("CustomSettings")
                        .HasForeignKey("Her.Domain.Entities.UserCustomSettingsModel", "UserID");
                });

            modelBuilder.Entity("Her.Domain.Entities.UserDailyWroEventsModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser", "User")
                        .WithMany("DailyWroEvents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Her.Domain.Entities.Wro.WrocItemsModel", "WrocItems")
                        .WithMany("UserDailyWroEvents")
                        .HasForeignKey("WrocItemsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocMainImageModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Wro.WrocOfferModel", "WrocOffer")
                        .WithOne("MainImage")
                        .HasForeignKey("Her.Domain.Entities.Wro.WrocMainImageModel", "WrocOfferId");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferAdressModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Wro.WrocItemsModel", "WrocItems")
                        .WithOne("Address")
                        .HasForeignKey("Her.Domain.Entities.Wro.WrocOfferAdressModel", "WrocItemId");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferCategoriesModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Wro.WrocOfferModel", "User")
                        .WithMany("Categories")
                        .HasForeignKey("WrocOfferId");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Wro.WrocItemsModel", "WrocItems")
                        .WithOne("Offer")
                        .HasForeignKey("Her.Domain.Entities.Wro.WrocOfferModel", "WrocItemId");
                });

            modelBuilder.Entity("Her.Domain.Entities.Wro.WrocOfferTypeModel", b =>
                {
                    b.HasOne("Her.Domain.Entities.Wro.WrocOfferModel", "WrocOffer")
                        .WithOne("Type")
                        .HasForeignKey("Her.Domain.Entities.Wro.WrocOfferTypeModel", "WrocOfferId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Her.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Her.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
